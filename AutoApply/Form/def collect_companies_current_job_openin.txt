    def collect_companies_current_job_openings(self, soup):
        print("\ncollect_companies_current_job_openings()")
        current_url = self.browser.current_url
        list_of_job_urls = []
        if self.application_company_name == 'lever':
            self.soup_elements["postings_wrapper"] = soup.find('div', class_="postings-wrapper")
            self.soup_elements["postings_groups"] = self.soup_elements["postings_wrapper"].find_all('div', class_="postings-group")
            for postings_group in self.soup_elements["postings_groups"]:
                # Extracting large-category-header if present
                #TODO - company_department[Design]
                large_category_header = postings_group.find('div', class_="large-category-header")
                if large_category_header:
                    print("Large Category Header:", large_category_header.text)
                # Extracting posting-category-title if present
                #TODO - company_department[App-Design]
                posting_category_title = postings_group.find('div', class_="posting-category-title large-category-label")
                if posting_category_title:
                    print("Posting Category Title:", posting_category_title.text)

                # Extracting all posting elements
                postings = postings_group.find_all('div', class_="posting")
                for posting in postings:
                    # Confirming the 'Apply' button
                    #TODO: Pick one!
                    # job_opening_href = apply_button
                    apply_button = posting.find('a', text='Apply')
                    if apply_button:
                        print("Apply Button URL:", apply_button['href'])

                    # Finding the title button and extracting job title
                    #TODO: Pick one!
                    # button_to_job_description = title_button
                    title_button = posting.find('a', class_="posting-title")
                    if title_button:
                        job_title = title_button.find('h5', {'data-qa': 'posting-name'})
                        if job_title:
                            print("Job Title:", job_title.text)
                            
                    #Error Handling: Confirm apply_button and title_button links are = !!!
                    apply_href = apply_button['href']
                    title_href = title_button['href']
                    
                    absolute_apply_href = self.get_absolute_url(apply_href)
                    absolute_title_href = self.get_absolute_url(title_href)
                    
                    if absolute_apply_href == absolute_title_href:
                        link_to_job = absolute_apply_href

                    # Extracting other details
                    posting_categories = posting.find('div', class_="posting-categories")
                    if posting_categories:
                        location = posting_categories.find('span', class_='location')
                        #TODO - company_department[Design - App-Design]
                        department = posting_categories.find('span', class_='department')
                        commitment = posting_categories.find('span', class_='commitment')
                        workplaceTypes = posting_categories.find('span', class_='workplaceTypes')

                        print("Location:", location.text if location else None)
                        print("Department:", department.text if department else None)
                        print("Commitment:", commitment.text if commitment else None)
                        print("Workplace Types:", workplaceTypes.text if workplaceTypes else None)

                    print()  # Separate postings with a blank line
            
            
            
            
            
            
            
            
            
            postings_group_apply = postings_wrapper.find_all('div', class_=lambda x: x and ('postings-group' in x or 'posting-apply' in x))
            for section in postings_group_apply:
                self.init_current_jobs_details()
                company_department = section.find('div', class_='large-category-header').text
                if section.name == 'div' and section.get('class') == 'posting-apply':
                    job_opening_href = section.next_sibling
                    #if job_opening_href.name == 'a' and job_opening_href.get('class') == 'posting-title':
                        button_to_job_description = job_opening_href
                        job_url = self.construct_url_to_job(current_url, job_opening_href)
                        job_title = job_opening_href.find('h5').text
                        if self.users_basic_requirements_job_title(job_title) == False:
                            continue
                        #TODO: These ALL need to be in try-except incase nothing is found!
                        experience_level = self.get_experience_level(job_title)
                        span_tag_location = job_opening_href.find('span', {'class', 'sort-by-location'})
                        span_tag_workplaceType = job_opening_href.find('span', {'class': 'workplaceTypes'})
                        job_location = span_tag_location.text if span_tag_location else None
                        job_workplaceType = span_tag_workplaceType.text if span_tag_workplaceType else None
                if self.check_users_basic_requirements(job_title, job_location, job_workplaceType):
                    self.current_jobs_details.update({
                        'company_department': company_department,
                        'job_url': job_url,
                        'job_title': job_title,
                        'experience_level': experience_level,
                        'job_location': job_location,
                        'job_workplaceType': job_workplaceType
                    })
                    if not experience_level:
                        list_of_job_urls.append(job_url)
                # self.print_companies_internal_job_opening("company_job_openings", self.application_company_name, JobTitle=job_title, JobLocation=job_location, WorkPlaceTypes=job_workplaceType, CompanyDepartment=company_department, JobTeamInCompany=span_tag_company_team, JobHREF=job_url, ButtonToJob=button_to_job_description)
                self.print_companies_internal_job_opening("company_job_openings", self.application_company_name, JobTitle=job_title, JobLocation=job_location, WorkPlaceTypes=job_workplaceType, CompanyDepartment=company_department, JobHREF=job_url, ButtonToJob=button_to_job_description)
        elif self.application_company_name == 'greenhouse':
            
            
            
            
            
            
            
            
            
            
            
            
























    def company_workflow(self, incoming_link):
        print("\ncompany_workflow()")
        if isinstance(incoming_link, list):
            self.current_url = incoming_link[0]
            self.list_of_links = incoming_link.copy()
        elif isinstance(incoming_link, str):
            self.current_url = incoming_link
            self.list_of_links.append(incoming_link)

        self.determine_application_company_name()
        webpage_num = self.determine_current_page(self.current_url)
        if webpage_num == 0:
            self.companys_internal_job_openings_URL = self.current_url

        index = 0
        #TODO: incorporate index into ==> self.current_jobs_details {MAYBE ensure order is all good!!}!!!!!!!!!
        while index < len(self.list_of_links):


    def url_parser(self, url):
        parts = urlparse(url)
        directories = parts.path.strip('/').split('/')
        queries = parts.query.strip('&').split('&')
        
        elements = {
            'scheme': parts.scheme,
            'netloc': parts.netloc,
            'path': parts.path,
            'params': parts.params,
            'query': parts.query,
            'fragment': parts.fragment,
            'directories': directories,
            'queries': queries,
        }
        
        return elements
    
    
    
    
    
    
    
    
    
    
    
    
    
    
















"PERSONAL_URL", 