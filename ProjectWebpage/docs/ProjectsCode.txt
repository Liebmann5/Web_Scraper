and now to provide all my code to start here is my index.html
<!DOCTYPE html>
<html itemscope="" itemtype="http://schema.org/WebPage" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html;charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta id="viewport" name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="canonical" href="%PUBLIC_URL%/">
</head>

<body>
    <div id="root"></div>
</body>

</html>








and then here is my App.js
import React, { Suspense, lazy } from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';

import Main from './layouts/Main'; //fallback for lazy pages

import './static/css/Main.scss';
import Footer from './components/Footer';
const { PUBLIC_URL } = process.env;

const Index = lazy(() => import('./pages/Index'));
const About = lazy(() => import('./pages/About'));
const Projects = lazy(() => import('./pages/Projects'));
const Stats = lazy(() => import('./pages/Stats'));
const Data = lazy(() => import('./pages/Data'));
const Papers = lazy(() => import('./pages/Papers'));
const NicksPrivateParts = lazy(() => import('./pages/NicksPrivateParts'));
const NotFound = lazy(() => import('./pages/NotFound'));

const App = () => (
    <BrowserRouter basename={PUBLIC_URL}>
        <Suspense fallback={<Main />}>
            <Routes>
            {/* <Banner />
            ok roots being here makes sense b/c I was laying out the overall design BUT... 
            how do you put all your various pages here? You can't you dunce! SSSSSooooo direct
            them here you doofus dunce crook! */}
                {/* Commented out routes */}
                <Route path="/" element={<Index />} />
                <Route path="/about" element={<About />} />
                <Route path="/projects" element={<Projects />} />
                <Route path="/stats" element={<Stats />} />
                <Route path="/data" element={<Data />} />
                <Route path="/papers" element={<Papers />} />
                <Route path="/privateparts" element={<NicksPrivateParts />} />
                <Route path="*" element={<NotFound />} />
            </Routes>
        </Suspense>
        <Footer />
    </BrowserRouter>
);

export default App;









and then here is my index.js
import React from 'react';
import { createRoot, hydrateRoot } from 'react-dom/client';
import App from './App';

// const rootElement = document.getElementById('root');

// See https://reactjs.org/docs/strict-mode.html
const StrictApp = () => (
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

const rootElement = document.getElementById('root');

// hydrate is required by react-snap.
if (rootElement.hasChildNodes()) {
  hydrateRoot(rootElement, <StrictApp />);
} else {
  const root = createRoot(rootElement);
  root.render(<StrictApp />);
}










and then here is my Footer.js
import React from 'react';
import '../static/css/Footer.scss'; // Assuming you have a Footer.scss file for styling

const Footer = () => (
  <footer className="footer">
    <div className="container">
      <div className="content">
        <p>
          Nick The Chick Â© 2023. All rights reserved.
        </p>
      </div>
    </div>
  </footer>
);

export default Footer;








and then here is my GithubInfo.js
import React, { useState, useEffect } from 'react';

const GithubInfo = () => {
  const [githubData, setGithubData] = useState(null);

  useEffect(() => {
    const fetchGithubData = async () => {
      try {
        const response = await fetch('https://api.github.com/repos/liebmann5/web_scraper');
        const data = await response.json();
        setGithubData(data);
      } catch (error) {
        console.error('Error fetching GitHub data:', error);
      }
    };

    fetchGithubData();
  }, []);

  if (!githubData) {
    return <div>Loading...</div>;
  }

  return (
    <div className="github-info">
      <a href={githubData.html_url} target="_blank" rel="noopener noreferrer">
        <img src={githubData.owner.avatar_url} alt="GitHub Logo" className="github-logo" />
      </a>
      <div className="github-details">
        <span className="username-repo">{githubData.full_name}</span>
        <span className="stars-forks">
          <span className="stars">Stars: {githubData.stargazers_count}</span>
          <span className="forks">Forks: {githubData.forks_count}</span>
        </span>
      </div>
    </div>
  );
};

export default GithubInfo;









and then here is my MainCard.js
import React from 'react';
import PropTypes from 'prop-types';

const Card = ({ data }) => (
    <div className="main-card">
        <figure className="main-card-attr">
            <a href={data.link} className="main-card-img">
                <img src={data.link} alt={data.alt} />
            </a>
            <div className="summary">
                <h3><a href={data.link}>{data.title}</a></h3>
                <p>{data.summary}</p>
            </div>
        </figure>
    </div>
);

Card.propTypes = {
    data: PropTypes.shape({
        title: PropTypes.string.isRequired,
        link: PropTypes.string,
        image: PropTypes.string.isRequired,
        alt: PropTypes.string.isRequired,
        summary: PropTypes.string.isRequired,
    }).isRequired,
};

export default Card;








and then here is my SubCard.js
import React from 'react';
import PropTypes from 'prop-types';

const SubCard = () => (
    <div className="sub-card">
        {/*
        <section className="sub-card-attr">
            <div className="download-project">
                <a href={data.projectLink}>
                    <span className={data.elementorScreenOnly}>Download-Project</span>
                    <i className={data.downloadIcon} />
                </a>
            </div>
            <div className="github-stats">
                <GithubStats />
            </div>
        </section>
        */}
    </div>
)


import React, { useState, useCallback, useEffect } from 'react';


const GithubStats = () => {
    useState
    fetchData useCallback
    await fetch
        https://github.com/repos/Liebmann/personal-site
        await resizeBy.json
        initialData.map

    return (
        <h3>
            <Table data />
        </h3>
    )
}








here is my Analytics.js 
import { useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import ReactGA from 'react-ga';

const { NODE_ENV, REACT_APP_GA_TRACKING_ID } = process.env;

if (NODE_ENV === 'production') {
  ReactGA.initialize(REACT_APP_GA_TRACKING_ID);
}

const Analytics = () => {
  const { pathname } = useLocation();

  useEffect(() => {
    if (NODE_ENV === 'production') {
      ReactGA.set({
        page: pathname,
      });
      ReactGA.pageview(pathname);
    }
  }, [pathname]);

  return null;
};

export default Analytics;








and then here is my Navigation.js
import React from 'react';
import { Link } from 'react-router-dom';

import '../../static/css/Navigation.scss';
import routes from '../../data/routes';

// Navigation component to display the list of routes
const Navigation = () => (
  <nav id="navigation-bar">
    {/* Display the index route */}
    <h1 className="navigation-title">
      {routes.filter((route) => route.index).map((route) => (
        <Link key={route.name} to={route.path}>{route.name}</Link>
      ))}
    </h1>
    {/* Display the other routes */}
    <ul className="navigation-links">
      {routes.filter((route) => !route.index).map((route) => (
        <li key={route.name} className="navigation-item">
          <Link to={route.path} className="navigation-link">{route.name}</Link>
        </li>
      ))}
    </ul>
  </nav>
);

export default Navigation;










and then my githubData.json file is currently empty
and then here is my routes.js
const routes = [
    {
        index: true,
        name: "Nicholas J. Liebmann",
        path: '/',
    },
    {
        name: 'About',
        path: '/about',
    },
    {
        name: 'Projects',
        path: '/projects',
    },
    {
        name: 'Stats',
        path: '/stats',
    },
    {
        name: 'Data',
        path: '/data',
    },
    {
        name: 'Papers',
        path: '/papers',
    },
    {
        name: 'NicksPrivateParts',
        path: '/privateparts',
    },
];

export default routes;









and then here is my ./src/layouts/Main.js
import React from 'react';
import PropTypes from 'prop-types';
import { Helmet, HelmetProvider } from 'react-helmet-async';

import Navigation from '../components/Template/Navigation';
import Footer from '../components/Footer';
// import Analytics from '../components/Template/Analytics';

const Main = (props) => (
    <HelmetProvider>
      {/* Uncomment when Analytics component is done! */}
      {/* <Analytics /> */}
      {/* Uncomment when made a ScrollToTop component */}
      {/* <ScrollToTop /> */}
      <Helmet titleTemplate="%s | Nick is better than you!" defaultTitle="Nick L" defer={false}>
        {props.title && <title>{props.title}</title>}
        <meta name="description" content={props.description} />
      </Helmet>
      <div id="wrapper">
        <Navigation />
        <div id="main">
          {props.children}
        </div>
        {props.fullPage ? null : <Footer />}
      </div>
    </HelmetProvider>
  );

Main.propTypes = {
  children: PropTypes.oneOfType([
     PropTypes.arrayOf(PropTypes.node),
     PropTypes.node,
  ]),
  fullPage: PropTypes.bool,
  title: PropTypes.string,
  description: PropTypes.string,
};

Main.defaultProps = {
  children: null,
  fullPage: false,
  title: null,
  description: "Nick's Private Website",
};

export default Main;










and then here is my Index.js
import React from 'react';
import { Link } from 'react-router-dom';

import Main from '../layouts/Main';
import GithubInfo from '../components/GithubInfo';

const Index = () => (
  <Main
    description={"Nick's personal website. Soon to be the API thing gateway."}
  >
    <article className="post" id="index">
      <header>
        <div className="title">
          <h2>Nicks Website you Bald Headed dunce</h2>
          {/* <h2><Link to="/">Under Construction</Link></h2> */}
          <p>Nick's personal website. Soon to be the API apply program thing gateway</p>
        </div>
        <GithubInfo />
      </header>
      <div className="webpage-contents">
        <p> Welcome to my website. Please feel free to read more <Link to="/about">about me</Link>,
          or you can check out my available {' '}
          <Link to="/privateparts">Private Parts</Link>!
          {/*<Link to="/resume">resume</Link>, {' '}
          <Link to="/projects">projects</Link>, {' '}
          view <Link to="/stats">site statistics</Link>, {' '}
  or <Link to="/contact">contact</Link> me.*/}
        </p>
        <p> Source available <a href="https://scontent-hou1-1.xx.fbcdn.net/v/t1.6435-9/95605713_10218995949062272_8965093280861650944_n.jpg?_nc_cat=102&ccb=1-7&_nc_sid=dd63ad&_nc_ohc=yO2l7v8_ax0AX8WzU9W&_nc_ht=scontent-hou1-1.xx&oh=00_AfA_auB7sTHF4q4rtobSHu4hvwZlyTBme80Gl4iwx1NeZg&oe=655201DB">here</a>.</p>
        <div className="construction">{/*put construction stuff in here*/}</div>
      </div>
    </article>
  </Main>
);

export default Index;










and then here is my NotFound.js
import React from 'react';
import { Link } from 'react-router-dom';
import { Helmet, HelmetProvider } from 'react-helmet-async';

const PageNotFound = () => (
  <HelmetProvider>
    <div className="not-found">
      <Helmet title="404 Not Found">
        <meta name="description" content="The content you are looking for cannot be found." />
      </Helmet>
      <h1>Page Not Found</h1>
      <p>Return <Link to="/">home</Link>.</p>
    </div>
  </HelmetProvider>
);

export default PageNotFound;










and then because this is still a work in progress some of my files are still being worked on but at least wanted all the planned routes to be working so just created them and then decided to just have them all contain the same contents as Index.js so for the files About.js, Data.js, NicksPrivateParts.js, Papers.js, Projects.js, and Stats.js just have each with this
import Index from './Index';

export default Index;








and then here is my Footer.scss
.footer {
  background-color: #333;
  color: #fff;
  padding: 1rem;
  text-align: center;
}






and then here is my GithubInfo.scss
.github-info {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 10px;
  
    .github-logo {
      width: 50px;
      height: 50px;
      border-radius: 50%;
    }
  
    .github-details {
      display: flex;
      flex-direction: column;
      align-items: center;
  
      .username-repo,
      .stars-forks {
        font-size: 14px;
        margin: 5px;
      }
    }
}











and then here is my Main.scss
@import './GithubInfo.scss';

// Reset some default browser styles
body, h1, h2, h3, h4, h5, h6, p, ul, ol {
    margin: 0;
    padding: 0;
  }
  
  // Make a classless HTML element look like a Flexbox container
  .flex {
    display: flex;
  }
  
  // Basic styling
  body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    color: #333;
    margin: 0;
    padding: 0;
    background: #f4f4f4;
  }
  
  .container {
    max-width: 1100px;
    margin: auto;
    overflow: hidden;
  }
  
  // Header styling
  header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #50b3a2;
    color: white;
    padding: 20px;
    text-align: center;
  }

  // .title {
  //   padding-left: 240px;
  // }

  .title {
    padding-left: 300px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }
  
  .title h2, .title p {
    margin: 0;  /* Remove default margin */
    padding: 0; /* Remove default padding */
    //width: fit-content; /* Limit width to content */
    
  }
  
  .title p {
    white-space: pre-wrap;  /* Allow text to wrap to next line */
  }
  
  
  // Sidebar styling
  .sidebar {
    background: #333;
    color: #fff;
    padding: 15px;
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
    width: 220px; //************************ */
  }
  
  // Main content styling
  .webpage-contents {
    overflow-y: auto;
    margin-left: 280px;
    padding: 20px;
  }
  
  // Footer styling
  footer {
    background: #333;
    color: #fff;
    text-align: center;
    padding: 10px;
    position: fixed;
    bottom: 0;
    width: 100%;
  }
  
  // Github Info styling
  .github-info {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 10px;
  
    .github-logo {
      width: 50px;
      height: 50px;
      border-radius: 50%;
    }
  
    .github-details {
      display: flex;
      flex-direction: column;
      align-items: center;
  
      .username-repo,
      .stars-forks {
        font-size: 14px;
        margin: 5px;
      }
    }
  }










and then here is my Navigation.scss
#navigation-bar {
  background-color: #1a202c;
  color: #a0aec0;
  width: 250px;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  overflow-y: auto;
  text-align: center; // Center everything
}

.navigation-title {
  font-size: 2.5em; // Increase the font size to 2.5em
  padding-top: 25px; // Adjust this value to center the title vertically
  padding-bottom: 10px; // Adjust this value to center the title vertically
}

.navigation-links {
  list-style-type: none;
  margin: 0;
  padding: 0;
  padding-top: 19px; // Start the list right at the bottom of the header
}

.navigation-item {
  padding: 8px;
  text-align: center;
  margin-bottom: 10px;

  &:first-child {
    margin-top: 0; // Start the first item right at the bottom of the header
  }

  &:hover {
    background-color: #575757; // Background color on hover
  }
}

.navigation-link {
  color: white;
  padding: 12px;
  text-decoration: none;
  display: block;
}












and then here is my package.json
{
  "name": "a-website-fit-for-a-king",
  "version": "1.0.0",
  "hompage": "https://nicholasliebmann.com/",
  "license": "of-couse-here-officer",
  "repository": {
    "type": "git",
    "url": "https://github.com/Liebmann5/Liebmann5.github.io"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "postbuild": "react-snap"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.4.2",
    "@fortawesome/free-brands-svg-icons": "^6.4.2",
    "@fortawesome/free-regular-svg-icons": "^6.4.2",
    "@fortawesome/react-fontawesome": "0.2.0",
    "dayjs": "^1.11.10",
    "markdown-to-jsx": "^7.3.2",
    "node-fetch": "^3.3.2",
    "prop-types": "^15.8.1",
    "react": "^18.2.0",
    "react-burger-menu": "^3.0.9",
    "react-dom": "^18.2.0",
    "react-ga": "^3.3.1",
    "react-helmet-async": "^1.3.0",
    "react-router-dom": "^6.15.0",
    "react-scripts": "^5.0.1"
  },
  "devDependencies": {
    "@babel/eslint-parser": "^7.22.15",
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "@babel/plugin-transform-private-property-in-object": "^7.22.11",
    "@babel/preset-env": "^7.22.20",
    "@babel/preset-react": "^7.22.15",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^14.0.0",
    "@testing-library/user-event": "^14.5.1",
    "babel-jest": "^29.7.0",
    "eslint": "^8.49.0",
    "eslint-config-airbnb": "^19.0.4",
    "eslint-plugin-import": "^2.28.1",
    "eslint-plugin-jsx-a11y": "6.7.1",
    "eslint-plugin-react": "^7.33.2",
    "react-snap": "^1.23.0",
    "rimraf": "^5.0.1",
    "sass": "^1.67.0",
    "source-map-explorer": "^2.5.3"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
