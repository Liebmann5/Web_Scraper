def get_user_nice_and_ready():
    python_executable = sys.executable
    
    #Check if pip is installed
    try:
        subprocess.check_output([python_executable, '-m', 'pip', '--version'])
        pip_installed = True
    except OSError:
        pip_installed = False
        
    if not pip_installed:
        #pip isn't installed so this will take care of that for you sweety :)
        subprocess.call([python_executable, '-m', 'ensurepip', '--upgrade'])
        
    #Update pip
    subprocess.call([python_executable, '-m', 'pip', 'install', '--upgrade', 'pip'])
    
    print("Pip has been updated successfully")
    
    
def find_pip_name():
    pip_names = ['pip', 'pip3', f'pip{sys.version_info.major}, {sys.version_info.minor}']
    for pip_name in pip_names:
        try:
            subprocess.check_output([pip_name, '--version'])
            return pip_name
        except Exception:
            continue
    raise Exception("pip wasn't found")
    
    
def update_required_packages():
    python_executable = sys.executable
    required_packages = ['requests', 'schedule', 'pandas']
    pip_name = find_pip_name()

    for package in required_packages:
        try:
            # Check if the package is installed
            subprocess.check_output([pip_name, 'show', package])
            package_installed = True
        except subprocess.CalledProcessError:
            package_installed = False

        if not package_installed:
            # Package is not installed, so install it
            subprocess.call([pip_name, 'install', package])
        else:
            # Package is installed, check for updates
            package_info = subprocess.check_output([pip_name, 'show', package]).decode().strip()
            version_info = [line for line in package_info.split('\n') if line.startswith('Version:')]
            if version_info:
                current_version = version_info[0].split(': ')[1].strip()
                latest_version = subprocess.check_output([pip_name, 'install', '--no-cache-dir', '--upgrade', '--no-input', package]).decode().strip()

                if current_version != latest_version:
                    print(f"Updated {package} from {current_version} to {latest_version}")
                else:
                    print(f"{package} is up to date")


